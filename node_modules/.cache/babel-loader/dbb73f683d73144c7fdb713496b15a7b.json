{"ast":null,"code":"var _jsxFileName = \"/Users/minkyeong-eon/day05/src/components/Test2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Test2 = () => {\n  _s();\n\n  const [cnt, setCnt] = useState(1);\n  const ref1 = useRef();\n  const ref2 = useRef();\n\n  const onColor = () => {\n    setCnt(cnt + 1);\n    ref1.current.style.color = 'pink';\n    ref2.current.style.color = 'green';\n  }; // mount / update ( 많이 사용하지 않는다 )\n\n\n  useEffect(() => {\n    console.log('useEffect');\n    ref1.current.style.color = 'hotpink';\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Hooks  = useEffect \\uC124\\uBA85 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\uCE74\\uC6B4\\uD2B8 : \", cnt, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      ref: ref1,\n      children: \"useEffect \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      ref: ref2,\n      children: \"useLayoutEffect \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onColor,\n      children: \"\\uCEEC\\uB7EC\\uC640 \\uC22B\\uC790 \\uC99D\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Test2, \"qnRPQJtZhY0XjImaE21AwwDerpc=\");\n\n_c = Test2;\nexport default Test2;\n/*\r\nHooks\r\nEffect Hook을 사용하면 함수 컴포넌트에서 side effect (부수효과) 를 수행 \r\n부수효과 (side effect) : 함수가 결과값을 반환하는것 외에 다른 일을 할때 그 함수는 부수효과를 가진다 \r\n부수효과  : 비동기통신 요청/응답 , DOM조작 , 구독/취소 등 \r\n\r\nclass 형 : \r\n라이프사이클 : \r\ncomponentDidMount : 처음 실행후 \r\ncomponentDidUpdate : 값이 변경된 후 \r\ncomponentWillUnmount : 닫기, 로딩이 끝난후 \r\n\r\n함수형 위 3개를 합쳐놓은것이 useEffect 이다 \r\n\r\n - useEffect : 화면에 렌더링이 완료된 후 \r\n - 컴포넌트가 렌더링 될때마다 업데이트 작업을 수행 \r\n \r\n ** 화면에 그려진 후 실행 \r\n형식)\r\nuseEffect 형식\r\nuseEffect( 콜백함수)\r\n1. mount / update ( 많이 사용하지 않는다 )\r\nuseEffect( () => {\r\n    mount / update\r\n    실행문\r\n})\r\n\r\n2. mount ( 한번만 실행 )\r\nuseEffect( ()  => {\r\n     mount \r\n}, [] )\r\n\r\n3.  mount / update ( 많이 사용한다 )\r\n의존값 : 업데이트 되는값 , 특정 state , 특정 props *** \r\nuseEffect( () => {\r\n     mount / update\r\n}, [의존값] )\r\n\r\n\r\n4. 정리(Clean-up) 사용할경우 \r\nuseEffect( ()  => {\r\n    실행문 : mount / update\r\n\r\n    //뒷정리\r\n    return() => {\r\n       정리(Clean-up)\r\n    }\r\n},[의존값])\r\n\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Test2\");","map":{"version":3,"sources":["/Users/minkyeong-eon/day05/src/components/Test2.js"],"names":["React","useEffect","useRef","useState","Test2","cnt","setCnt","ref1","ref2","onColor","current","style","color","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM,CAAEC,GAAF,EAAQC,MAAR,IAAmBH,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAMI,IAAI,GAAGL,MAAM,EAAnB;AACA,QAAMM,IAAI,GAAGN,MAAM,EAAnB;;AAEA,QAAMO,OAAO,GAAG,MAAO;AACnBH,IAAAA,MAAM,CAAED,GAAG,GAAG,CAAR,CAAN;AACAE,IAAAA,IAAI,CAACG,OAAL,CAAaC,KAAb,CAAmBC,KAAnB,GAA2B,MAA3B;AACAJ,IAAAA,IAAI,CAACE,OAAL,CAAaC,KAAb,CAAmBC,KAAnB,GAA2B,OAA3B;AACH,GAJD,CALgB,CAWhB;;;AACAX,EAAAA,SAAS,CAAE,MAAO;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAP,IAAAA,IAAI,CAACG,OAAL,CAAaC,KAAb,CAAmBC,KAAnB,GAAyB,SAAzB;AACH,GAHQ,CAAT;AAKA,sBACI;AAAA,4BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAA,0CAAWP,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,eAGG;AAAI,MAAA,GAAG,EAAGE,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHH,eAIG;AAAI,MAAA,GAAG,EAAGC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJH,eAKG;AAAQ,MAAA,OAAO,EAAGC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA1BD;;GAAML,K;;KAAAA,K;AA4BN,eAAeA,KAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nconst Test2 = () => {\r\n    const [ cnt , setCnt ] = useState(1)\r\n    const ref1 = useRef()\r\n    const ref2 = useRef()\r\n\r\n    const onColor = ()  => {\r\n        setCnt( cnt + 1 )\r\n        ref1.current.style.color = 'pink'\r\n        ref2.current.style.color = 'green'\r\n    }\r\n\r\n    // mount / update ( 많이 사용하지 않는다 )\r\n    useEffect( ()  => {\r\n        console.log('useEffect')\r\n        ref1.current.style.color='hotpink'\r\n    })\r\n\r\n    return (\r\n        <div>\r\n           <h2> Hooks  = useEffect 설명 </h2> \r\n           <h1>카운트 : {cnt} </h1>\r\n           <h1 ref={ ref1 }>useEffect </h1>\r\n           <h1 ref={ ref2 }>useLayoutEffect </h1>\r\n           <button onClick={ onColor }>컬러와 숫자 증가</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Test2;\r\n/*\r\nHooks\r\nEffect Hook을 사용하면 함수 컴포넌트에서 side effect (부수효과) 를 수행 \r\n부수효과 (side effect) : 함수가 결과값을 반환하는것 외에 다른 일을 할때 그 함수는 부수효과를 가진다 \r\n부수효과  : 비동기통신 요청/응답 , DOM조작 , 구독/취소 등 \r\n\r\nclass 형 : \r\n라이프사이클 : \r\ncomponentDidMount : 처음 실행후 \r\ncomponentDidUpdate : 값이 변경된 후 \r\ncomponentWillUnmount : 닫기, 로딩이 끝난후 \r\n\r\n함수형 위 3개를 합쳐놓은것이 useEffect 이다 \r\n\r\n - useEffect : 화면에 렌더링이 완료된 후 \r\n - 컴포넌트가 렌더링 될때마다 업데이트 작업을 수행 \r\n \r\n ** 화면에 그려진 후 실행 \r\n형식)\r\nuseEffect 형식\r\nuseEffect( 콜백함수)\r\n1. mount / update ( 많이 사용하지 않는다 )\r\nuseEffect( () => {\r\n    mount / update\r\n    실행문\r\n})\r\n\r\n2. mount ( 한번만 실행 )\r\nuseEffect( ()  => {\r\n     mount \r\n}, [] )\r\n\r\n3.  mount / update ( 많이 사용한다 )\r\n의존값 : 업데이트 되는값 , 특정 state , 특정 props *** \r\nuseEffect( () => {\r\n     mount / update\r\n}, [의존값] )\r\n\r\n\r\n4. 정리(Clean-up) 사용할경우 \r\nuseEffect( ()  => {\r\n    실행문 : mount / update\r\n\r\n    //뒷정리\r\n    return() => {\r\n       정리(Clean-up)\r\n    }\r\n},[의존값])\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}